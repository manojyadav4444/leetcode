class Solution {
    public List<List<String>> solveNQueens(int n) {
        int [][]board = new int[n][n];
        List<List<String>> ans = new ArrayList<>();
        for(int i=0;i<n;i++){
            board[0][i] = 1;
            System.out.print(recur(board,1,ans,n));
            board[0][i] = 0;
        }
        
        return ans;
    }
    public boolean recur(int [][]board,int r,List<List<String>> ans,int n){
        if(r==n){
            List<String> temp = new ArrayList<String>();
            for(int i=0;i<n;i++){
                StringBuilder s = new StringBuilder();
                for(int j=0;j<n;j++){
                    if(board[i][j]==1)s.append('Q');
                    else s.append('.');
                }
                temp.add(s.toString());
            }
            ans.add(temp);
            return false;
        }
        for(int i=0;i<n;i++){
            if(isSafe(board,r,i,n)){
                board[r][i] = 1;
                if(recur(board,r+1,ans,n)) return true;
                board[r][i] = 0;
            }
        }
        return false;
        
    }
    public boolean isSafe(int [][]board,int r,int c,int n){
        for(int i=0;i<r;i++){
            if(board[i][c]==1) return false;
        }
        int i = r-1;
        int j = c-1;
        while(i>=0 && j>=0){
            if(board[i][j]==1) return false;
            i--;
            j--;
        }
        i = r-1;
        j = c+1;
        while(i>=0 && j<n){
            if(board[i][j]==1) return false;
            i--;
            j++;
        }
        return true;
    }
}
