class Solution {
    public boolean canPartition(int[] a) {
        int sum = 0; 
        int n = a.length;
        for(int i=0;i<n;i++){
            sum += a[i];
        }
        if(sum%2 == 1){
            return false;
        }
        else{
            int s = sum/2;
            int dp[][] = new int[n+1][s+1];
            for(int[]temp : dp){
                Arrays.fill(temp,-1);
            }
            int ans = recur(a,s,n,dp);
            if(ans==1){
                return true;
            }
            else{
                return false;
            }
        }
    }
    public static int recur(int a[], int s, int n, int [][]dp){
	    if(s==0) return 1;
	    if(n==0) return 0;
        if(dp[n][s]!=-1){
            return dp[n][s];
        }
	    if(a[n-1]<=s){
            if((recur(a,s-a[n-1],n-1,dp)==1) || (recur(a,s,n-1,dp)==1)){
                return dp[n][s]=1;
            }
            else{
                return dp[n][s]=0;
            }
	    }
	    else{
	        return dp[n][s]=recur(a,s,n-1,dp);
	    }
	}
}
